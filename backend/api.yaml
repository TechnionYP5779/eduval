openapi: 3.0.1
info:
  title: EMon API
  version: 1.0.0
servers:
  - url: 'https://api.emon-teach.com'
tags:
  - name: teacher
    description: stuff related to the teachers
  - name: student
    description: stuff related to the students
  - name: course
    description: course stuff
  - name: log
    description: emon transaction stuffz
  - name: lesson
    description: |
      What you use during an actual lesson.
      
      In addition to these functions, you will also subscribe to [MQTT topics](https://www.hivemq.com/blog/mqtt-essentials-part-5-mqtt-topics-best-practices/) to receive live updates.  
      The clients should only *subscribe*. Sending messages is handled by the API calls below.  
      The content of the notifications is the same as the corresponding API call.
      
      There are several topics groups, which are fairly similar to the API endpoints:
      * ``lesson/{courseId}/status`` - A message will be published here when the lesson starts/ends.
      * ``lesson/{courseId}/messages/{studentId}`` - Any messages sent to a student will be published here.
      * ``lesson/{courseId}/students`` - Messages about students connecting will be sent here.
      * ``lesson/{courseId}/teacherMessages`` - Any messages sent to the teacher will be published here.
      
      IMPORTANT: Please note there is no leading slash (``/``) at the beginning of topic names.  
      Also remember that you can use wildcards.
  - name: shop
    description: stuff related to the item shop

paths:
  /teacher:
    put:
      tags:
        - teacher
      summary: Update an existing teacher
      requestBody:
        description: >-
          Teacher object that needs to be updated. ID is required, rest is
          optional.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
        required: true
      responses:
        '200':
          description: All OK
          content: {}
        '404':
          description: Teacher not found
          content: {}
        '400':
          description: Validation exception. Invalid JSON.
          content: {}
      security:
        - auth0_token: []
    post:
      tags:
        - teacher
      summary: Add a new teacher
      requestBody:
        description: Teacher object that needs to be added. ID field is optional and is ignored.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
        required: true
      responses:
        '200':
          description: All OK
          content: 
            text/plain:
              schema:
                type: integer
                format: int64
                example: 15
                description: 'ID of inserted teacher'
        '400':
          description: Validation exception. Invalid JSON.
          content: {}
      security:
        - auth0_token: []
  
  '/teacher/{teacherId}/activeLesson':
    get:
      tags:
        - teacher
      summary: Return the taught course
      description: Returns the lesson the teacher is teaching right now.
      parameters:
        - name: teacherId
          in: path
          description: ID of teacher to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: integer
                format: int64
                description: The ID of the course being taught.
        '204':
          description: No content. The request is valid, but there is no course being taught.
        '400':
          description: Validation exception. Invalid ID.
          content: {}
        '404':
          description: Teacher not found
          content: {}
      security:
        - auth0_token: []
  
  '/teacher/{teacherId}':
    get:
      tags:
        - teacher
      summary: Find teacher by ID
      description: Returns a single teacher
      parameters:
        - name: teacherId
          in: path
          description: ID of teacher to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
        '400':
          description: Validation exception. Invalid ID.
          content: {}
        '404':
          description: Teacher not found
          content: {}
      security:
        - auth0_token: []
    delete:
      tags:
        - teacher
      summary: Deletes a teacher
      parameters:
        - name: teacherId
          in: path
          description: ID of teacher to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: All OK
          content: {}
        '400':
          description: Validation exception. Invalid ID.
          content: {}
        '404':
          description: Teacher not found
          content: {}
      security:
        - auth0_token: []
  
  '/teacher/byToken/{authToken}':
    get:
      tags:
        - teacher
      summary: Find teacher by Auth0 token
      description: Returns a single teacher
      parameters:
        - name: authToken
          in: path
          description: Auth0 token of teacher to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
        '400':
          description: Validation exception. Missing token.
          content: {}
        '404':
          description: Teacher not found
          content: {}
      security:
        - auth0_token: []

  
  /student:
    put:
      tags:
        - student
      summary: Update an existing student
      requestBody:
        description: >-
          Student object that needs to be updated. ID is required, rest is
          optional.
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/Student'
        required: true
      responses:
        '200':
          description: All OK
          content: {}
        '404':
          description: Student not found
          content: {}
        '400':
          description: Validation exception. Invalid JSON.
          content: {}
      security:
        - auth0_token: []
    post:
      tags:
        - student
      summary: Add a new student
      requestBody:
        description: Student object that needs to be added. ID field is optional and is ignored.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
        required: true
      responses:
        '200':
          description: All OK
          content: 
            text/plain:
              schema:
                type: integer
                format: int64
                example: 15
                description: 'ID of inserted student'
        '400':
          description: Validation exception. Invalid JSON.
          content: {}
      security:
        - auth0_token: []
  
  '/student/{studentId}':
    get:
      tags:
        - student
      summary: Find student by ID
      description: Returns a single student
      parameters:
        - name: studentId
          in: path
          description: ID of student to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          description: Validation exception. Invalid ID.
          content: {}
        '404':
          description: Teacher not found
          content: {}
      security:
        - auth0_token: []
    delete:
      tags:
        - student
      summary: Deletes a student
      parameters:
        - name: studentId
          in: path
          description: ID of student to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: All OK
          content: {}
        '400':
          description: Validation exception. Invalid ID.
          content: {}
        '404':
          description: Student not found
          content: {}
      security:
        - auth0_token: []
  
  '/student/{studentId}/courseInventory/{courseId}':
    get:
      tags:
        - student
      summary: Get the course items a student owns
      description: Returns a list of all shop items a student has purchased in a single course.
      parameters:
        - name: studentId
          in: path
          description: ID of student
          required: true
          schema:
            type: integer
            format: int64
        - name: courseId
          in: path
          description: ID of course
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OwnedItem'
        '400':
          description: Validation exception. Invalid ID.
          content: {}
        '404':
          description: Teacher not found
          content: {}
      security:
        - auth0_token: []
  '/student/{studentId}/courseInventory/{courseId}/useItem':
    post:
      tags:
        - student
      summary: Uses an item a student owns
      description: Uses an item in a student's inventory.
      parameters:
        - name: studentId
          in: path
          description: ID of student
          required: true
          schema:
            type: integer
            format: int64
        - name: courseId
          in: path
          description: ID of course
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: ID of the item to use.
        content:
          application/json:
            schema:
              type: integer
      responses:
        '200':
          description: successful operation
          content: {}
        '400':
          description: Validation exception. Invalid ID.
          content: {}
        '404':
          description: Teacher not found
          content: {}
      security:
        - auth0_token: []
  
  '/student/byToken/{authToken}':
    get:
      tags:
        - student
      summary: Find student by Auth0 token
      description: Returns a single student
      parameters:
        - name: authToken
          in: path
          description: Auth0 token of student to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          description: Validation exception. Missing token.
          content: {}
        '404':
          description: Student not found
          content: {}
      security:
        - auth0_token: []
  
  '/student/{teacherId}/activeLesson':
    get:
      tags:
        - student
      summary: Return the taught course
      description: Returns the lesson the teacher is teaching right now.
      parameters:
        - name: teacherId
          in: path
          description: ID of teacher to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: integer
                format: int64
                description: The ID of the course being taught.
        '204':
          description: No content. The request is valid, but there is no course being taught.
        '400':
          description: Validation exception. Invalid ID.
          content: {}
        '404':
          description: Teacher not found
          content: {}
      security:
        - auth0_token: []
  
  '/student/{studentId}/emonBalance/byCourse/{courseId}':
    get:
      tags:
        - student
      summary: Find course by ID
      description: Returns a student's emon balance in a certain course
      parameters:
        - name: studentId
          in: path
          description: ID of the relevant student
          required: true
          schema:
            type: integer
            format: int64
        - name: courseId
          in: path
          description: ID of the requested course
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: integer
                format: int64
                example: 15
        '400':
          description: Validation exception. Invalid ID(s).
          content: {}
        '404':
          description: Course not found
          content: {}
      security:
        - auth0_token: []

  
  /course:
    put:
      tags:
        - course
      summary: Update an existing course
      requestBody:
        description: >-
          Course object that needs to be updated. ID is required.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
        required: true
      responses:
        '200':
          description: All OK
          content: {}
        '404':
          description: Course not found
          content: {}
        '400':
          description: Validation exception. Invalid JSON.
          content: {}
      security:
        - auth0_token: []
    post:
      tags:
        - course
      summary: Add a new course
      requestBody:
        description: Course object that needs to be added. ID field is optional and is ignored.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
        required: true
      responses:
        '200':
          description: All OK
          content: 
            text/plain:
              schema:
                type: integer
                format: int64
                example: 15
                description: 'ID of inserted course'
        '400':
          description: Validation exception. Invalid JSON.
          content: {}
      security:
        - auth0_token: []
  
  '/course/{courseId}':
    get:
      tags:
        - course
      summary: Find course by ID
      description: Returns a single course
      parameters:
        - name: courseId
          in: path
          description: ID of course to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '400':
          description: Validation exception. Invalid ID.
          content: {}
        '404':
          description: Course not found
          content: {}
      security:
        - auth0_token: []
    delete:
      tags:
        - course
      summary: Deletes a course
      parameters:
        - name: courseId
          in: path
          description: ID of course to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: All OK
          content: {}
        '400':
          description: Validation exception. Invalid ID.
          content: {}
        '404':
          description: Course not found
          content: {}
      security:
        - auth0_token: []
  
  '/course/{courseId}/registered':
    get:
      tags:
        - course
      summary: Get registered students
      
      description: Returns the registered students list
      parameters:
        - name: courseId
          in: path
          description: ID of the relevant course
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: All OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
        '400':
          description: Validation exception. Invalid ID.
          content: {}
        '404':
          description: No such course
          content: {}
      security:
        - auth0_token: []
    post:
      tags:
        - course
      summary: Register students to a course
      
      description: >-
        Adds students to the registered students list.
        
        Note! does not check validity of course id or supplied students cause i'm lazy. if you pass bad values, you'll get 502.
      
      parameters:
        - name: courseId
          in: path
          description: ID of the relevant course
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Array of student IDs that should be registered.
        content:
          application/json:
            schema:
              oneOf:
              - type: array
                items:
                  type: integer
              - type: array
                items:
                  type: string
                  format: email
        required: true
      responses:
        '200':
          description: All OK
          content: {}
        '400':
          description: Validation exception. Invalid ID/JSON.
          content: {}
      security:
        - auth0_token: []
  
  '/course/{courseId}/registered/{studentId}':
    delete:
      tags:
        - course
      summary: Delete a student from a course
      
      description: Removes a student from the registered students list
      parameters:
        - name: courseId
          in: path
          description: ID of the relevant course
          required: true
          schema:
            type: integer
            format: int64
        - name: studentId
          in: path
          description: ID of the student
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: All OK
          content: {}
        '400':
          description: Validation exception. Invalid ID(s).
          content: {}
        '404':
          description: No such registration pair
          content: {}
      security:
        - auth0_token: []
  
  '/course/{courseId}/purchasedItems':
    get:
      tags:
        - course
      summary: Get the items that students bought in this course
      
      description: Returns a list of all the items from this course that were purchased and used.
      parameters:
        - name: courseId
          in: path
          description: ID of the relevant course
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: All OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemWithStudents'
        '400':
          description: Validation exception. Invalid ID.
          content: {}
        '404':
          description: No such course
          content: {}
      security:
        - auth0_token: []
  
  '/course/byTeacher/{teacherId}':
    get:
      tags:
        - course
      summary: Find all courses by a teacher
      description: Returns an array of courses
      parameters:
        - name: teacherId
          in: path
          description: ID of the teacher
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
        '400':
          description: Validation exception. Invalid ID.
          content: {}
        '404':
          description: Teacher not found
          content: {}
      security:
        - auth0_token: []
  
  '/course/byStudent/{studentId}':
    get:
      tags:
        - course
      summary: Find all courses that a student is taking
      description: Returns an array of courses
      parameters:
        - name: studentId
          in: path
          description: ID of the student
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
        '400':
          description: Validation exception. Invalid ID.
          content: {}
        '404':
          description: Student not found
          content: {}
      security:
        - auth0_token: []

  
  '/log/ofStudent/{studentId}/byCourse/{courseId}':
    get:
      tags:
        - log
      summary: Get the transaction log
      description: Returns the transaction log of a student in a course
      parameters:
        - name: studentId
          in: path
          description: ID of the relevant student
          required: true
          schema:
            type: integer
            format: int64
        - name: courseId
          in: path
          description: ID of the requested course
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Log'
        '400':
          description: Validation exception. Invalid ID(s).
          content: {}
        '404':
          description: Course not found
          content: {}
      security:
        - auth0_token: []
  
  
  '/lesson/{courseId}/status':
    get:
      tags:
        - lesson
      summary: Get the status of a lesson
      
      parameters:
        - name: courseId
          in: path
          description: The ID of the lesson's course
          required: true
          schema:
            type: integer
            format: int64
        
      responses:
        '200':
          description: All OK
          content:
            text/plain:
              schema:
                type: string
                enum:
                  - LESSON_START
                  - LESSON_END
        '404':
          description: Course not found
          content: {}
        '400':
          description: Validation exception. Invalid ID.
          content: {}
      security:
        - auth0_token: []
    post:
      tags:
        - lesson
      summary: Start or end a lesson
      
      parameters:
        - name: courseId
          in: path
          description: The ID of the lesson's course
          required: true
          schema:
            type: integer
            format: int64
            
      requestBody:
        description: >-
          A string describing the new status.
        content:
          application/json:
            schema:
              type: string
              enum:
                - LESSON_START
                - LESSON_END
        required: true
        
      responses:
        '200':
          description: All OK
          content: {}
        '404':
          description: Course not found
          content: {}
        '400':
          description: Validation exception. Invalid ID/status.
          content: {}
      security:
        - auth0_token: []
  
  '/lesson/{courseId}/messages/{studentId}':
    get:
      tags:
        - lesson
      summary: Get the student's messages
      description: Returns all the messages a student got during this lesson
      parameters:
        - name: courseId
          in: path
          description: ID of the lesson's course
          required: true
          schema:
            type: integer
            format: int64
        - name: studentId
          in: path
          description: ID of the requested student
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '400':
          description: Validation exception. Invalid ID(s).
          content: {}
        '404':
          description: Course not found
          content: {}
      security:
        - auth0_token: []
    post:
      tags:
        - lesson
      summary: Send a message to a student
      parameters:
        - name: courseId
          in: path
          description: The ID of the lesson's course
          required: true
          schema:
            type: integer
            format: int64
        - name: studentId
          in: path
          description: ID of the student
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The message to send.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
        required: true
      responses:
        '200':
          description: All OK
          content: {}
        '404':
          description: Course not found
          content: {}
        '400':
          description: Validation exception. Invalid ID(s)/JSON.
          content: {}
      security:
        - auth0_token: []
    delete:
      tags:
        - lesson
      summary: Clear a student's messages
      description: At the end of the lesson, clear all messages from the student's table. This is so next lesson they can have a clear slate.
      parameters:
        - name: courseId
          in: path
          description: The ID of the lesson's course
          required: true
          schema:
            type: integer
            format: int64
        - name: studentId
          in: path
          description: ID of the student
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: All OK
          content: {}
        '404':
          description: Course not found
          content: {}
        '400':
          description: Validation exception. Invalid ID(s).
          content: {}
      security:
        - auth0_token: []


  '/lesson/{courseId}/present':
    get:
      tags:
        - lesson
      summary: Get a list of present students
      parameters:
        - name: courseId
          in: path
          description: The ID of the lesson's course
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: All OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StudentWithDesk'
        '404':
          description: Course not found
          content: {}
        '405':
          description: Invalid ID
          content: {}
      security:
        - auth0_token: []
    post:
      tags:
        - lesson
      summary: Mark a student as present
      parameters:
        - name: courseId
          in: path
          description: The ID of the lesson's course
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The student's ID and desk.
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                  description: The ID of the student
                desk:
                  type: string
        required: true
      responses:
        '200':
          description: All OK
          content: {}
        '404':
          description: Course not found
          content: {}
        '405':
          description: Invalid ID
          content: {}
      security:
        - auth0_token: []
  
  '/lesson/{courseId}/teacherMessages':
    get:
      tags:
        - lesson
      summary: Get the messages sent to the teacher
      description: Returns all the messages the teacher got during this lesson from students.
      parameters:
        - name: courseId
          in: path
          description: ID of the lesson's course
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeacherMessage'
        '400':
          description: Validation exception. Invalid ID.
          content: {}
        '404':
          description: Course not found
          content: {}
      security:
        - auth0_token: []
    post:
      tags:
        - lesson
      summary: Send a message to the teacher
      parameters:
        - name: courseId
          in: path
          description: The ID of the lesson's course
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The message to send.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeacherMessage'
        required: true
      responses:
        '200':
          description: All OK
          content: {}
        '404':
          description: Course not found
          content: {}
        '400':
          description: Validation exception. Invalid ID/JSON.
          content: {}
      security:
        - auth0_token: []
    delete:
      tags:
        - lesson
      summary: Clear the teacher's messages
      description: At the end of the lesson, clear all messages the teacher got. This is so next lesson they can have a clear slate.
      parameters:
        - name: courseId
          in: path
          description: The ID of the lesson's course
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: All OK
          content: {}
        '404':
          description: Course not found
          content: {}
        '400':
          description: Validation exception. Invalid ID.
          content: {}
      security:
        - auth0_token: []
 
  
  '/shop/{courseId}/items':
    get:
      tags:
        - shop
      summary: Get the items in a course's shop
      description: Returns all the itemsin the shop of a certain lesson.
      parameters:
        - name: courseId
          in: path
          description: ID of the shop's course
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShopItem'
        '400':
          description: Validation exception. Invalid ID.
          content: {}
        '404':
          description: Course not found
          content: {}
      security:
        - auth0_token: []
    post:
      tags:
        - shop
      summary: Add an item to a shop
      parameters:
        - name: courseId
          in: path
          description: The ID of the shop's course
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The item to add.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShopItem'
        required: true
      responses:
        '200':
          description: All OK
          content: {}
        '404':
          description: Course not found
          content: {}
        '400':
          description: Validation exception. Invalid ID/JSON.
          content: {}
      security:
        - auth0_token: []
    put:
      tags:
        - shop
      summary: Update an existing item
      parameters:
        - name: courseId
          in: path
          description: The ID of the shop's course
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: >-
          Item object that needs to be updated. ID is required, rest is
          optional.
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/ShopItem'
        required: true
      responses:
        '200':
          description: All OK
          content: {}
        '404':
          description: Item not found
          content: {}
        '400':
          description: Validation exception. Invalid JSON.
          content: {}
      security:
        - auth0_token: []
  
  '/shop/{courseId}/item/{itemId}':  
    delete:
      tags:
        - shop
      summary: Remove an item from a shop
      description: Remove an item from a course's shop.
      parameters:
        - name: courseId
          in: path
          description: The ID of the shop's course
          required: true
          schema:
            type: integer
            format: int64
        - name: itemId
          in: path
          description: The ID of the item to remove
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: All OK
          content: {}
        '404':
          description: Course not found
          content: {}
        '400':
          description: Validation exception. Invalid ID.
          content: {}
      security:
        - auth0_token: []
  '/shop/{courseId}/order':
    post:
      tags:
        - shop
      summary: Order an item
      parameters:
        - name: courseId
          in: path
          description: The ID of the shop's course
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The item to purchase and its amount.
        content:
          application/json:
            schema:
              type: object
              properties:
                studentId:
                  type: integer
                  format: int64
                itemId:
                  type: integer
                  format: int64
                amount:
                  type: integer
                  format: int64
        required: true
      responses:
        '200':
          description: All OK
          content: {}
        '404':
          description: Course not found
          content: {}
        '400':
          description: Validation exception. Invalid ID/JSON.
          content: {}
      security:
        - auth0_token: []
  
  
components:
  schemas:
    Teacher:
      type: object
      properties:
        id:
          type: integer
          format: int64
        authIdToken:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        phoneNum:
          type: string
      required:
      - name
      additionalProperties: false
    
    Student:
      type: object
      properties:
        id:
          type: integer
          format: int64
        authIdToken:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        phoneNum:
          type: string
          
    StudentWithDesk:
      type: object
      properties:
        id:
          type: integer
          format: int64
        authIdToken:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        phoneNum:
          type: string
        desk:
          type: string
          
    Course:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        teacherId:
          type: integer
          format: int64
        location:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
          
    Message:
      oneOf:
        - type: object
          properties:
            messageType:
              type: string
              enum: ["EMON"]
            messageReason:
              type: string
              description: unused currently. used to point out the reason for awarding money.
            value:
              type: integer
              format: int64
              description: The amount of emon given.
        - type: object
          properties:
            messageType:
              type: string
              enum: ["EMOJI"]
            emojiType:
              type: string
              description: what emoji was sent
              enum: ["EMOJI_HAPPY", "EMOJI_THUMBS_UP", "EMOJI_ANGEL", "EMOJI_GRIN", "EMOJI_SHUSH", "EMOJI_ZZZ", "EMOJI_ANGRY", "EMOJI_THUMBS_DOWN"]
          
    TeacherMessage:
      oneOf:
        - type: object
          properties:
            studentId:
              type: integer
              format: int64
            messageType:
              type: string
              enum: ["MESSAGE"]
            content:
              type: string
              description: what message was sent
              enum: ["MESSAGE_CONFUSED", "MESSAGE_QUESTION", "MESSAGE_NEED_TO_LEAVE"]
        - type: object
          properties:
            studentId:
              type: integer
              format: int64
            messageType:
              type: string
              enum: ["EMOJI"]
            emojiType:
              type: string
              description: what emoji was sent
              enum: ["EMOJI_HAPPY", "EMOJI_THUMBS_UP", "EMOJI_ANGEL", "EMOJI_GRIN", "EMOJI_SHUSH", "EMOJI_ZZZ", "EMOJI_ANGRY", "EMOJI_THUMBS_DOWN"]
          
    Log:
      oneOf:
        - type: object
          properties:
            id:
              type: integer
              format: int64
            studentId:
              type: integer
              format: int64
            courseId:
              type: integer
              format: int64
            messageType:
              type: string
              enum: ["EMON"]
            time:
              type: string
              format: date-time
            value:
              type: integer
              format: int64
              description: The amount of emon given.
        - type: object
          properties:
            id:
              type: integer
              format: int64
            studentId:
              type: integer
              format: int64
            item:
              type: integer
              format: int64
            messageType:
              type: string
              enum: ["PURCHASE"]
            time:
              type: string
              format: date-time
            cost:
              type: integer
              format: int64
              description: The amount of emon spent.
        - type: object
          properties:
            id:
              type: integer
              format: int64
            studentId:
              type: integer
              format: int64
            courseId:
              type: integer
              format: int64
            messageType:
              type: string
              enum: ["EMOJI"]
            time:
              type: string
              format: date-time
            emojiType:
              type: string
              description: what emoji was sent
              enum: ["EMOJI_HAPPY", "EMOJI_THUMBS_UP", "EMOJI_ANGEL", "EMOJI_GRIN", "EMOJI_SHUSH", "EMOJI_ZZZ", "EMOJI_ANGRY", "EMOJI_THUMBS_DOWN"]
    
    ShopItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        cost:
          type: integer
        amountAvailable:
          type: integer
        sellByDate:
          type: string
          format: date
      additionalProperties: false
      
    OwnedItem:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        amount:
          type: integer
        amountUsed:
          type: integer
        isActive:
          type: boolean
      additionalProperties: false
    ItemWithStudents:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        students:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                format: int64
              name:
                type: string
              email:
                type: string
                format: email
              phoneNum:
                type: string
              amountPurchased:
                type: integer
              amountUsed:
                type: integer
      additionalProperties: false
    
 
  securitySchemes:
    auth0_token:
      type: http
      scheme: bearer
      bearerFormat: JWT 
